##
rm(list = ls())

##
y <- c(21, 23, 19, 24, 25, 23, 19, 21, 20, 18, 22, 20, 15, 10, 13, 14, 11, 15)
mg <- c(rep("0.5mg",6), rep("1.0mg",6), rep("1.5mg",6))

m <- 3
n.i <- c(6,6,6)

N <- sum(n.i)

## mle''s
mu.i.hat <- tapply(y, mg, mean)
sigma.sq.hat <- (sum((y[mg=="0.5mg"]-mu.i.hat[1])^2) + sum((y[mg=="1.0mg"]-mu.i.hat[2])^2) + sum((y[mg=="1.5mg"]-mu.i.hat[3])^2))/N

mu.i.hat
sigma.sq.hat


var.mu.hat.i <- sigma.sq.hat/n.i
var.sigma.sq.hat.i <- (2*sigma.sq.hat^2)/N

var.mu.hat.i
var.sigma.sq.hat.i

## Let''s use optim() to get the same result

log.likelihood <- function(theta){
	
	mu <- theta[1:3]
	sigma.sq <- theta[4]
	
	ll <- sum( dnorm(y[mg=="0.5mg"], mu[1], sqrt(sigma.sq), log=T)) + sum(dnorm(y[mg=="1.0mg"], mu[2], sqrt(sigma.sq), log=T)) + sum(dnorm(y[mg=="1.5mg"], mu[3], sqrt(sigma.sq), log=T))
	
   return(ll)
}

## Let''s test the function
theta <- c(mu.i.hat, sigma.sq.hat)
log.likelihood(theta)

## Use optim() 
start <- c(rep(1,3), 1)
out <- optim(start, log.likelihood, hessian=TRUE, control=list(fnscale=-1), method="BFGS")
out


ll.max <- out$value

assym.vcv <- -solve(out$hessian)
assym.vcv
diag(assym.vcv)


## use analytical results
theta <- c(mu.i.hat, sigma.sq.hat)
ll.max <-  log.likelihood(theta)


## ok now let''s do this under H0: all mui''s are equal to mu
mu.0.hat <- mean(y)
sigma.sq.0.hat <- sum((y-mu.0.hat)^2)/N

ll.0.max <- sum(dnorm(y, mu.0.hat, sqrt(sigma.sq.0.hat), log=T))

##
alpha <- 0.05

## Exact test
test.stat <- -2*(ll.0.max-ll.max)
test.stat2 <- N*(log(sigma.sq.0.hat) - log(sigma.sq.hat))

test.stat
test.stat2

crit.value <- N*(1 + ((m-1)/(N-m))*qf(1-alpha, m-1, N-m))

test.stat >= crit.value


## Assymptotic test
test.stat > qchisq(1-alpha, m-1)

# Get the p-value
1-pchisq(test.stat, m-1)


## Visually
x <- seq(0, 40)
plot(x, dchisq(x, m-1), type="l", lwd=2)
abline(v=crit.value, col="red", lwd=2) 
abline(v=test.stat, col="blue", lwd=2) 


## Multiple Comaparisons
mod <- aov(y~factor(mg))
df <- df.residual(mod) # i.e. N-m
MSerror<-deviance(mod)/df # unbiased estimate
TukeyHSD(mod, ordered=T)
plot(TukeyHSD(mod, ordered=T))
abline(v=0, lwd=2, col="red")

(mu.i.hat[1] - mu.i.hat[2]) -  (qtukey(1-0.05, m, N-m)/sqrt(2))*sqrt(MSerror*(1/n.i[1]+1/n.i[2]))
(mu.i.hat[1] - mu.i.hat[2]) + (qtukey(1-0.05, m, N-m)/sqrt(2))*sqrt(MSerror*(1/n.i[1]+1/n.i[2]))


# you should order means (largest - smallest) 
test.stat <- ((mu.i.hat[1] - mu.i.hat[2]) - (0))/sqrt(MSerror*(1/n.i[1]+1/n.i[2]))*sqrt(2)
p.value <- 1-ptukey(test.stat, m, N-m)
p.value

